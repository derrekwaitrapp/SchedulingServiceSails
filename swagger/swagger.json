{
  "openapi": "3.0.0",
  "info": {
    "title": "Swagger Json",
    "description": "This is a generated swagger json for your sails project",
    "termsOfService": "http://example.com/terms",
    "contact": {
      "name": "Theophilus Omoregbee",
      "url": "http://github.com/theo4u",
      "email": "theo4u@ymail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:1337/"
    }
  ],
  "externalDocs": {
    "url": "https://theoomoregbee.github.io/"
  },
  "tags": [
    {
      "name": "Block",
      "description": "Sails blueprint actions for the **Block** model"
    },
    {
      "name": "Company",
      "description": "Sails blueprint actions for the **Company** model"
    },
    {
      "name": "Market",
      "description": "Sails blueprint actions for the **Market** model"
    },
    {
      "name": "Submarket",
      "description": "Sails blueprint actions for the **Submarket** model"
    },
    {
      "name": "User",
      "description": "Sails blueprint actions for the **User** model"
    }
  ],
  "components": {
    "schemas": {
      "block": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/block-without-required-constraint"
          }
        ]
      },
      "block-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Block**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "company": {
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/company"
              }
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "title": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time"
          },
          "claimedByUsers": {
            "description": "Array of **user**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user"
            }
          },
          "subMarket": {
            "description": "JSON dictionary representing the **submarket** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/submarket"
              }
            ]
          }
        }
      },
      "company": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/company-without-required-constraint"
          }
        ]
      },
      "company-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Company**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "company": {
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/company"
              }
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "markets": {
            "description": "Array of **market**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/market"
            }
          }
        }
      },
      "market": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/market-without-required-constraint"
          }
        ]
      },
      "market-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Market**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "company": {
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/company"
              }
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "submarkets": {
            "description": "Array of **submarket**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/submarket"
            }
          },
          "companies": {
            "description": "Array of **company**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/company"
            }
          }
        }
      },
      "submarket": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/submarket-without-required-constraint"
          }
        ]
      },
      "submarket-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Submarket**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "company": {
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/company"
              }
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "market": {
            "description": "JSON dictionary representing the **market** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/market"
              }
            ]
          },
          "blocks": {
            "description": "Array of **block**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/block"
            }
          }
        }
      },
      "user": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/user-without-required-constraint"
          }
        ]
      },
      "user-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **User**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "company": {
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/company"
              }
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "default": "driver",
            "example": "driver"
          },
          "blocks": {
            "description": "Array of **block**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/block"
            }
          }
        }
      }
    },
    "parameters": {
      "ModelPKParam-block": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Block** record's primary key value"
      },
      "ModelPKParam-company": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Company** record's primary key value"
      },
      "ModelPKParam-market": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Market** record's primary key value"
      },
      "ModelPKParam-submarket": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Submarket** record's primary key value"
      },
      "ModelPKParam-user": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **User** record's primary key value"
      },
      "AttributeFilterParam": {
        "in": "query",
        "name": "_*_",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "To filter results based on a particular attribute, specify a query parameter with the same name as the attribute defined on your model. For instance, if our `Purchase` model has an `amount` attribute, we could send `GET /purchase?amount=99.99` to return a list of $99.99 purchases."
      },
      "WhereQueryParam": {
        "in": "query",
        "name": "where",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Instead of filtering based on a specific attribute, you may instead choose to provide a `where` parameter with the WHERE piece of a [Waterline criteria](https://sailsjs.com/documentation/concepts/models-and-orm/query-language), _encoded as a JSON string_. This allows you to take advantage of `contains`, `startsWith`, and other sub-attribute criteria modifiers for more powerful `find()` queries.\n\ne.g. `?where={\"name\":{\"contains\":\"theodore\"}}`"
      },
      "LimitQueryParam": {
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The maximum number of records to send back (useful for pagination). Defaults to 30."
      },
      "SkipQueryParam": {
        "in": "query",
        "name": "skip",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The number of records to skip (useful for pagination)."
      },
      "SortQueryParam": {
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The sort order. By default, returned records are sorted by primary key value in ascending order.\n\ne.g. `?sort=lastName%20ASC`"
      }
    }
  },
  "paths": {
    "/subMarkets/{_id}/blocks": {
      "get": {
        "summary": "/subMarkets/{_id}/blocks",
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "/subMarkets/{_id}/blocks",
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "/subMarkets/{_id}/blocks",
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "/subMarkets/{_id}/blocks",
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "/subMarkets/{_id}/blocks",
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blocks/{_id}/claim/{userId}": {
      "post": {
        "summary": "/blocks/{_id}/claim/{userId}",
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `userId`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blocks/{_id}/dropClaim/{userId}": {
      "get": {
        "summary": "/blocks/{_id}/dropClaim/{userId}",
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `userId`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "/blocks/{_id}/dropClaim/{userId}",
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `userId`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "/blocks/{_id}/dropClaim/{userId}",
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `userId`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "/blocks/{_id}/dropClaim/{userId}",
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `userId`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "/blocks/{_id}/dropClaim/{userId}",
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `userId`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blocks/find": {
      "get": {
        "summary": "List Block (find where) *",
        "description": "Find a list of **Block** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,title,start,end,publishedAt,claimedByUsers,subMarket"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,title,start,end,publishedAt,claimedByUsers,subMarket"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,claimedByUsers,subMarket"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Block** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/block"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blocks/find/{_id}": {
      "get": {
        "summary": "Get Block (find one) *",
        "description": "Look up the **Block** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-block"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,title,start,end,publishedAt,claimedByUsers,subMarket"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,title,start,end,publishedAt,claimedByUsers,subMarket"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,claimedByUsers,subMarket"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Block** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Block** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blocks/create": {
      "get": {
        "summary": "Create Block *",
        "description": "Create a new **Block** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "start",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "publishedAt",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "claimedByUsers",
            "schema": {
              "description": "Array of **user**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/user"
              }
            },
            "description": "Array of **user**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "subMarket",
            "schema": {
              "description": "JSON dictionary representing the **submarket** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/submarket"
                }
              ]
            },
            "description": "JSON dictionary representing the **submarket** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Block** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blocks/update/{_id}": {
      "get": {
        "summary": "Update Block *",
        "description": "Update an existing **Block** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-block"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "start",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "publishedAt",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "claimedByUsers",
            "schema": {
              "description": "Array of **user**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/user"
              }
            },
            "description": "Array of **user**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "subMarket",
            "schema": {
              "description": "JSON dictionary representing the **submarket** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/submarket"
                }
              ]
            },
            "description": "JSON dictionary representing the **submarket** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Block** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Block** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blocks/destroy/{_id}": {
      "get": {
        "summary": "Delete Block (destroy) *",
        "description": "Delete the **Block** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-block"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Block** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Block** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blocks/{_id}/{association}/add/{childid}": {
      "get": {
        "summary": "Add to for Block *",
        "description": "Add a foreign record to one of this **Block** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-block"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "claimedByUsers"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Block** record's foreign key values to use as the replacement for this collection (**claimedByUsers** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Block** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Block** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blocks/{_id}/{association}/replace": {
      "get": {
        "summary": "Replace for Block *",
        "description": "Replace all of the child records in one of this **Block** record's associations.\n\nOnly one of the query parameters, that matches the **association** path parameter, should be specified.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-block"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "claimedByUsers"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "query",
            "name": "claimedByUsers",
            "description": "**Block** record's foreign key values to use as the replacement for this collection (**claimedByUsers** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double",
                "description": "**Block** record's foreign key values to use as the replacement for this collection (**claimedByUsers** association)",
                "uniqueItems": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Block** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Block** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blocks/{_id}/{association}/remove/{childid}": {
      "get": {
        "summary": "Remove from for Block *",
        "description": "Remove a foreign record from one of this **Block** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-block"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "claimedByUsers"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Block** record's foreign key values to use as the replacement for this collection (**claimedByUsers** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Block** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Block** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/companies/find": {
      "get": {
        "summary": "List Company (find where) *",
        "description": "Find a list of **Company** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,markets"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,markets"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,markets"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Company** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/company"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/companies/find/{_id}": {
      "get": {
        "summary": "Get Company (find one) *",
        "description": "Look up the **Company** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,markets"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,markets"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,markets"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/companies/create": {
      "get": {
        "summary": "Create Company *",
        "description": "Create a new **Company** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "markets",
            "schema": {
              "description": "Array of **market**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/market"
              }
            },
            "description": "Array of **market**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Company** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/companies/update/{_id}": {
      "get": {
        "summary": "Update Company *",
        "description": "Update an existing **Company** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "markets",
            "schema": {
              "description": "Array of **market**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/market"
              }
            },
            "description": "Array of **market**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/companies/destroy/{_id}": {
      "get": {
        "summary": "Delete Company (destroy) *",
        "description": "Delete the **Company** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Company** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/companies/{_id}/{association}/add/{childid}": {
      "get": {
        "summary": "Add to for Company *",
        "description": "Add a foreign record to one of this **Company** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "markets"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Company** record's foreign key values to use as the replacement for this collection (**markets** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Company** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/companies/{_id}/{association}/replace": {
      "get": {
        "summary": "Replace for Company *",
        "description": "Replace all of the child records in one of this **Company** record's associations.\n\nOnly one of the query parameters, that matches the **association** path parameter, should be specified.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "markets"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "query",
            "name": "markets",
            "description": "**Company** record's foreign key values to use as the replacement for this collection (**markets** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double",
                "description": "**Company** record's foreign key values to use as the replacement for this collection (**markets** association)",
                "uniqueItems": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/companies/{_id}/{association}/remove/{childid}": {
      "get": {
        "summary": "Remove from for Company *",
        "description": "Remove a foreign record from one of this **Company** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "markets"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Company** record's foreign key values to use as the replacement for this collection (**markets** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Company** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/markets/find": {
      "get": {
        "summary": "List Market (find where) *",
        "description": "Find a list of **Market** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,submarkets,companies"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,submarkets,companies"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,submarkets,companies"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Market** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/market"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/markets/find/{_id}": {
      "get": {
        "summary": "Get Market (find one) *",
        "description": "Look up the **Market** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-market"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,submarkets,companies"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,submarkets,companies"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,submarkets,companies"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Market** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Market** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/markets/create": {
      "get": {
        "summary": "Create Market *",
        "description": "Create a new **Market** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "submarkets",
            "schema": {
              "description": "Array of **submarket**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/submarket"
              }
            },
            "description": "Array of **submarket**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "companies",
            "schema": {
              "description": "Array of **company**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/company"
              }
            },
            "description": "Array of **company**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Market** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/markets/update/{_id}": {
      "get": {
        "summary": "Update Market *",
        "description": "Update an existing **Market** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-market"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "submarkets",
            "schema": {
              "description": "Array of **submarket**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/submarket"
              }
            },
            "description": "Array of **submarket**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "companies",
            "schema": {
              "description": "Array of **company**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/company"
              }
            },
            "description": "Array of **company**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Market** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Market** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/markets/destroy/{_id}": {
      "get": {
        "summary": "Delete Market (destroy) *",
        "description": "Delete the **Market** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-market"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Market** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Market** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/markets/{_id}/{association}/add/{childid}": {
      "get": {
        "summary": "Add to for Market *",
        "description": "Add a foreign record to one of this **Market** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-market"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "submarkets",
                "companies"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Market** record's foreign key values to use as the replacement for this collection (**submarkets** association)",
                  "uniqueItems": true
                },
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Market** record's foreign key values to use as the replacement for this collection (**companies** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Market** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Market** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/markets/{_id}/{association}/replace": {
      "get": {
        "summary": "Replace for Market *",
        "description": "Replace all of the child records in one of this **Market** record's associations.\n\nOnly one of the query parameters, that matches the **association** path parameter, should be specified.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-market"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "submarkets",
                "companies"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "query",
            "name": "submarkets",
            "description": "**Market** record's foreign key values to use as the replacement for this collection (**submarkets** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double",
                "description": "**Market** record's foreign key values to use as the replacement for this collection (**submarkets** association)",
                "uniqueItems": true
              }
            }
          },
          {
            "in": "query",
            "name": "companies",
            "description": "**Market** record's foreign key values to use as the replacement for this collection (**companies** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double",
                "description": "**Market** record's foreign key values to use as the replacement for this collection (**companies** association)",
                "uniqueItems": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Market** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Market** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/markets/{_id}/{association}/remove/{childid}": {
      "get": {
        "summary": "Remove from for Market *",
        "description": "Remove a foreign record from one of this **Market** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-market"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "submarkets",
                "companies"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Market** record's foreign key values to use as the replacement for this collection (**submarkets** association)",
                  "uniqueItems": true
                },
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Market** record's foreign key values to use as the replacement for this collection (**companies** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Market** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Market** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/submarkets/find": {
      "get": {
        "summary": "List Submarket (find where) *",
        "description": "Find a list of **Submarket** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,market,blocks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,market,blocks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,market,blocks"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Submarket** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/submarket"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/submarkets/find/{_id}": {
      "get": {
        "summary": "Get Submarket (find one) *",
        "description": "Look up the **Submarket** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-submarket"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,market,blocks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,market,blocks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,market,blocks"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Submarket** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Submarket** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/submarkets/create": {
      "get": {
        "summary": "Create Submarket *",
        "description": "Create a new **Submarket** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "market",
            "schema": {
              "description": "JSON dictionary representing the **market** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/market"
                }
              ]
            },
            "description": "JSON dictionary representing the **market** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "blocks",
            "schema": {
              "description": "Array of **block**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/block"
              }
            },
            "description": "Array of **block**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Submarket** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/submarkets/update/{_id}": {
      "get": {
        "summary": "Update Submarket *",
        "description": "Update an existing **Submarket** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-submarket"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "market",
            "schema": {
              "description": "JSON dictionary representing the **market** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/market"
                }
              ]
            },
            "description": "JSON dictionary representing the **market** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "blocks",
            "schema": {
              "description": "Array of **block**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/block"
              }
            },
            "description": "Array of **block**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Submarket** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Submarket** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/submarkets/destroy/{_id}": {
      "get": {
        "summary": "Delete Submarket (destroy) *",
        "description": "Delete the **Submarket** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-submarket"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Submarket** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Submarket** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/submarkets/{_id}/{association}/add/{childid}": {
      "get": {
        "summary": "Add to for Submarket *",
        "description": "Add a foreign record to one of this **Submarket** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-submarket"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "blocks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Submarket** record's foreign key values to use as the replacement for this collection (**blocks** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Submarket** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Submarket** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/submarkets/{_id}/{association}/replace": {
      "get": {
        "summary": "Replace for Submarket *",
        "description": "Replace all of the child records in one of this **Submarket** record's associations.\n\nOnly one of the query parameters, that matches the **association** path parameter, should be specified.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-submarket"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "blocks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "query",
            "name": "blocks",
            "description": "**Submarket** record's foreign key values to use as the replacement for this collection (**blocks** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double",
                "description": "**Submarket** record's foreign key values to use as the replacement for this collection (**blocks** association)",
                "uniqueItems": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Submarket** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Submarket** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/submarkets/{_id}/{association}/remove/{childid}": {
      "get": {
        "summary": "Remove from for Submarket *",
        "description": "Remove a foreign record from one of this **Submarket** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-submarket"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "blocks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Submarket** record's foreign key values to use as the replacement for this collection (**blocks** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Submarket** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Submarket** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/find": {
      "get": {
        "summary": "List User (find where) *",
        "description": "Find a list of **User** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,role,blocks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,role,blocks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,blocks"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **User** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/find/{_id}": {
      "get": {
        "summary": "Get User (find one) *",
        "description": "Look up the **User** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,role,blocks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,role,blocks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,blocks"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/create": {
      "get": {
        "summary": "Create User *",
        "description": "Create a new **User** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "default": "driver",
              "example": "driver"
            }
          },
          {
            "in": "query",
            "name": "blocks",
            "schema": {
              "description": "Array of **block**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/block"
              }
            },
            "description": "Array of **block**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **User** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/update/{_id}": {
      "get": {
        "summary": "Update User *",
        "description": "Update an existing **User** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "default": "driver",
              "example": "driver"
            }
          },
          {
            "in": "query",
            "name": "blocks",
            "schema": {
              "description": "Array of **block**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/block"
              }
            },
            "description": "Array of **block**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/destroy/{_id}": {
      "get": {
        "summary": "Delete User (destroy) *",
        "description": "Delete the **User** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **User** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{_id}/{association}/add/{childid}": {
      "get": {
        "summary": "Add to for User *",
        "description": "Add a foreign record to one of this **User** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "blocks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**blocks** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **User** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{_id}/{association}/replace": {
      "get": {
        "summary": "Replace for User *",
        "description": "Replace all of the child records in one of this **User** record's associations.\n\nOnly one of the query parameters, that matches the **association** path parameter, should be specified.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "blocks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "query",
            "name": "blocks",
            "description": "**User** record's foreign key values to use as the replacement for this collection (**blocks** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double",
                "description": "**User** record's foreign key values to use as the replacement for this collection (**blocks** association)",
                "uniqueItems": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{_id}/{association}/remove/{childid}": {
      "get": {
        "summary": "Remove from for User *",
        "description": "Remove a foreign record from one of this **User** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "blocks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**blocks** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **User** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/block_claimedbyusers__user_blocks/find": {
      "get": {
        "summary": "/block_claimedbyusers__user_blocks/find",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/block_claimedbyusers__user_blocks/find/{id}": {
      "get": {
        "summary": "/block_claimedbyusers__user_blocks/find/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/block_claimedbyusers__user_blocks/create": {
      "get": {
        "summary": "/block_claimedbyusers__user_blocks/create",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/block_claimedbyusers__user_blocks/update/{id}": {
      "get": {
        "summary": "/block_claimedbyusers__user_blocks/update/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/block_claimedbyusers__user_blocks/destroy/{id}": {
      "get": {
        "summary": "/block_claimedbyusers__user_blocks/destroy/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company_markets__market_companies/find": {
      "get": {
        "summary": "/company_markets__market_companies/find",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company_markets__market_companies/find/{id}": {
      "get": {
        "summary": "/company_markets__market_companies/find/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company_markets__market_companies/create": {
      "get": {
        "summary": "/company_markets__market_companies/create",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company_markets__market_companies/update/{id}": {
      "get": {
        "summary": "/company_markets__market_companies/update/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company_markets__market_companies/destroy/{id}": {
      "get": {
        "summary": "/company_markets__market_companies/destroy/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blocks": {
      "get": {
        "summary": "List Block (find where)",
        "description": "Find a list of **Block** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,title,start,end,publishedAt,claimedByUsers,subMarket"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,title,start,end,publishedAt,claimedByUsers,subMarket"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,claimedByUsers,subMarket"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Block** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/block"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Block",
        "description": "Create a new **Block** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Block"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Block** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Block instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/block"
              }
            }
          }
        }
      }
    },
    "/blocks/{_id}": {
      "get": {
        "summary": "Get Block (find one)",
        "description": "Look up the **Block** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-block"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,title,start,end,publishedAt,claimedByUsers,subMarket"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,title,start,end,publishedAt,claimedByUsers,subMarket"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,claimedByUsers,subMarket"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Block** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Block** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Block",
        "description": "Update an existing **Block** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-block"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Block** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Block** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Block instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/block-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Block (destroy)",
        "description": "Delete the **Block** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-block"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Block** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Block** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blocks/{_id}/{association}/{childid}": {
      "put": {
        "summary": "Add to for Block",
        "description": "Add a foreign record to one of this **Block** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-block"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "claimedByUsers"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Block** record's foreign key values to use as the replacement for this collection (**claimedByUsers** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Block** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Block** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Remove from for Block",
        "description": "Remove a foreign record from one of this **Block** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-block"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "claimedByUsers"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Block** record's foreign key values to use as the replacement for this collection (**claimedByUsers** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Block** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Block** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blocks/{_id}/{association}": {
      "put": {
        "summary": "Replace for Block",
        "description": "Replace all of the child records in one of this **Block** record's associations.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-block"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "claimedByUsers"
              ]
            },
            "description": "The name of the association"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Block** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Block** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "The primary key values (usually IDs) of the child records to use as the new members of this collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "number",
                      "format": "double",
                      "description": "**Block** record's foreign key values to use as the replacement for this collection (**claimedByUsers** association)",
                      "uniqueItems": true
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Populate association for Block",
        "description": "Populate and return foreign record(s) for the given association of this **Block** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Block"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-block"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "company",
                "claimedByUsers",
                "subMarket"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,title,start,end,publishedAt,claimedByUsers,subMarket"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,title,start,end,publishedAt,claimedByUsers,subMarket"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/company"
                      },
                      {
                        "$ref": "#/components/schemas/user"
                      },
                      {
                        "$ref": "#/components/schemas/submarket"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Block** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/companies": {
      "get": {
        "summary": "List Company (find where)",
        "description": "Find a list of **Company** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,markets"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,markets"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,markets"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Company** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/company"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Company",
        "description": "Create a new **Company** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Company"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Company** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Company instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/company"
              }
            }
          }
        }
      }
    },
    "/companies/{_id}": {
      "get": {
        "summary": "Get Company (find one)",
        "description": "Look up the **Company** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,markets"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,markets"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,markets"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Company",
        "description": "Update an existing **Company** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Company instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/company-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Company (destroy)",
        "description": "Delete the **Company** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Company** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/companies/{_id}/{association}/{childid}": {
      "put": {
        "summary": "Add to for Company",
        "description": "Add a foreign record to one of this **Company** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "markets"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Company** record's foreign key values to use as the replacement for this collection (**markets** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Company** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Remove from for Company",
        "description": "Remove a foreign record from one of this **Company** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "markets"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Company** record's foreign key values to use as the replacement for this collection (**markets** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Company** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/companies/{_id}/{association}": {
      "put": {
        "summary": "Replace for Company",
        "description": "Replace all of the child records in one of this **Company** record's associations.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "markets"
              ]
            },
            "description": "The name of the association"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "The primary key values (usually IDs) of the child records to use as the new members of this collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "number",
                      "format": "double",
                      "description": "**Company** record's foreign key values to use as the replacement for this collection (**markets** association)",
                      "uniqueItems": true
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Populate association for Company",
        "description": "Populate and return foreign record(s) for the given association of this **Company** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "company",
                "markets"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,markets"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,markets"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/company"
                      },
                      {
                        "$ref": "#/components/schemas/market"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/markets": {
      "get": {
        "summary": "List Market (find where)",
        "description": "Find a list of **Market** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,submarkets,companies"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,submarkets,companies"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,submarkets,companies"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Market** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/market"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Market",
        "description": "Create a new **Market** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Market"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Market** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Market instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/market"
              }
            }
          }
        }
      }
    },
    "/markets/{_id}": {
      "get": {
        "summary": "Get Market (find one)",
        "description": "Look up the **Market** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-market"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,submarkets,companies"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,submarkets,companies"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,submarkets,companies"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Market** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Market** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Market",
        "description": "Update an existing **Market** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-market"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Market** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Market** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Market instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/market-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Market (destroy)",
        "description": "Delete the **Market** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-market"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Market** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Market** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/markets/{_id}/{association}/{childid}": {
      "put": {
        "summary": "Add to for Market",
        "description": "Add a foreign record to one of this **Market** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-market"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "submarkets",
                "companies"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Market** record's foreign key values to use as the replacement for this collection (**submarkets** association)",
                  "uniqueItems": true
                },
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Market** record's foreign key values to use as the replacement for this collection (**companies** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Market** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Market** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Remove from for Market",
        "description": "Remove a foreign record from one of this **Market** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-market"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "submarkets",
                "companies"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Market** record's foreign key values to use as the replacement for this collection (**submarkets** association)",
                  "uniqueItems": true
                },
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Market** record's foreign key values to use as the replacement for this collection (**companies** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Market** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Market** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/markets/{_id}/{association}": {
      "put": {
        "summary": "Replace for Market",
        "description": "Replace all of the child records in one of this **Market** record's associations.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-market"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "submarkets",
                "companies"
              ]
            },
            "description": "The name of the association"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Market** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Market** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "The primary key values (usually IDs) of the child records to use as the new members of this collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "number",
                      "format": "double",
                      "description": "**Market** record's foreign key values to use as the replacement for this collection (**submarkets** association)",
                      "uniqueItems": true
                    },
                    {
                      "type": "number",
                      "format": "double",
                      "description": "**Market** record's foreign key values to use as the replacement for this collection (**companies** association)",
                      "uniqueItems": true
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Populate association for Market",
        "description": "Populate and return foreign record(s) for the given association of this **Market** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-market"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "company",
                "submarkets",
                "companies"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,submarkets,companies"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,submarkets,companies"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/company"
                      },
                      {
                        "$ref": "#/components/schemas/submarket"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Market** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/submarkets": {
      "get": {
        "summary": "List Submarket (find where)",
        "description": "Find a list of **Submarket** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,market,blocks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,market,blocks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,market,blocks"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Submarket** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/submarket"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Submarket",
        "description": "Create a new **Submarket** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Submarket** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Submarket instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/submarket"
              }
            }
          }
        }
      }
    },
    "/submarkets/{_id}": {
      "get": {
        "summary": "Get Submarket (find one)",
        "description": "Look up the **Submarket** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-submarket"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,market,blocks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,market,blocks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,market,blocks"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Submarket** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Submarket** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Submarket",
        "description": "Update an existing **Submarket** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-submarket"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Submarket** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Submarket** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Submarket instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/submarket-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Submarket (destroy)",
        "description": "Delete the **Submarket** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-submarket"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Submarket** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Submarket** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/submarkets/{_id}/{association}/{childid}": {
      "put": {
        "summary": "Add to for Submarket",
        "description": "Add a foreign record to one of this **Submarket** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-submarket"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "blocks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Submarket** record's foreign key values to use as the replacement for this collection (**blocks** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Submarket** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Submarket** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Remove from for Submarket",
        "description": "Remove a foreign record from one of this **Submarket** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-submarket"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "blocks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Submarket** record's foreign key values to use as the replacement for this collection (**blocks** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Submarket** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Submarket** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/submarkets/{_id}/{association}": {
      "put": {
        "summary": "Replace for Submarket",
        "description": "Replace all of the child records in one of this **Submarket** record's associations.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-submarket"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "blocks"
              ]
            },
            "description": "The name of the association"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Submarket** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submarket"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Submarket** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "The primary key values (usually IDs) of the child records to use as the new members of this collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "number",
                      "format": "double",
                      "description": "**Submarket** record's foreign key values to use as the replacement for this collection (**blocks** association)",
                      "uniqueItems": true
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Populate association for Submarket",
        "description": "Populate and return foreign record(s) for the given association of this **Submarket** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Submarket"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-submarket"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "company",
                "market",
                "blocks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,market,blocks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,description,market,blocks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/company"
                      },
                      {
                        "$ref": "#/components/schemas/market"
                      },
                      {
                        "$ref": "#/components/schemas/block"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Submarket** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "List User (find where)",
        "description": "Find a list of **User** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,role,blocks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,role,blocks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,blocks"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **User** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create User",
        "description": "Create a new **User** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "User"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **User** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the User instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        }
      }
    },
    "/users/{_id}": {
      "get": {
        "summary": "Get User (find one)",
        "description": "Look up the **User** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,role,blocks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,role,blocks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,blocks"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update User",
        "description": "Update an existing **User** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the User instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete User (destroy)",
        "description": "Delete the **User** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **User** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{_id}/{association}/{childid}": {
      "put": {
        "summary": "Add to for User",
        "description": "Add a foreign record to one of this **User** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "blocks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**blocks** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **User** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Remove from for User",
        "description": "Remove a foreign record from one of this **User** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "blocks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**blocks** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **User** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{_id}/{association}": {
      "put": {
        "summary": "Replace for User",
        "description": "Replace all of the child records in one of this **User** record's associations.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "blocks"
              ]
            },
            "description": "The name of the association"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "The primary key values (usually IDs) of the child records to use as the new members of this collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "number",
                      "format": "double",
                      "description": "**User** record's foreign key values to use as the replacement for this collection (**blocks** association)",
                      "uniqueItems": true
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Populate association for User",
        "description": "Populate and return foreign record(s) for the given association of this **User** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "company",
                "blocks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,role,blocks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,company,id,name,role,blocks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/company"
                      },
                      {
                        "$ref": "#/components/schemas/block"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/block_claimedbyusers__user_blocks": {
      "get": {
        "summary": "/block_claimedbyusers__user_blocks",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "/block_claimedbyusers__user_blocks",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/block_claimedbyusers__user_blocks/{id}": {
      "get": {
        "summary": "/block_claimedbyusers__user_blocks/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "/block_claimedbyusers__user_blocks/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "/block_claimedbyusers__user_blocks/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "/block_claimedbyusers__user_blocks/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/block_claimedbyusers__user_blocks/{parentid}/block_claimedByUsers": {
      "get": {
        "summary": "/block_claimedbyusers__user_blocks/{parentid}/block_claimedByUsers",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "parentid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `parentid`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/block_claimedbyusers__user_blocks/{parentid}/user_blocks": {
      "get": {
        "summary": "/block_claimedbyusers__user_blocks/{parentid}/user_blocks",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "parentid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `parentid`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company_markets__market_companies": {
      "get": {
        "summary": "/company_markets__market_companies",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "/company_markets__market_companies",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company_markets__market_companies/{id}": {
      "get": {
        "summary": "/company_markets__market_companies/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "/company_markets__market_companies/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "/company_markets__market_companies/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "/company_markets__market_companies/{id}",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company_markets__market_companies/{parentid}/company_markets": {
      "get": {
        "summary": "/company_markets__market_companies/{parentid}/company_markets",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "parentid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `parentid`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company_markets__market_companies/{parentid}/market_companies": {
      "get": {
        "summary": "/company_markets__market_companies/{parentid}/market_companies",
        "tags": [],
        "parameters": [
          {
            "in": "path",
            "name": "parentid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `parentid`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}